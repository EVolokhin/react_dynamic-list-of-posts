{"version":3,"sources":["components/PostsList/post.jsx","api/api.js","api/comments.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/input.jsx","components/NewCommentForm/textArea.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/comment.jsx","components/PostDetails/PostDetails.jsx","api/users.js","App.jsx","index.js"],"names":["Post","post","handlePostId","isOpen","userId","title","id","className","type","value","onClick","event","target","request","url","option","a","fetch","result","ok","Error","status","statusText","json","getPostComments","postId","comments","data","filter","comment","deleteComment","commentId","method","postComment","headers","body","JSON","stringify","getUserPosts","posts","getPostDetails","selectedPostId","setDetails","setComments","selectedUser","setPosts","response","PostsList","useState","useEffect","fetchDataPosts","map","key","Input","name","setState","placeholder","onChange","TextArea","NewCommentForm","addComent","setName","email","setEmail","setBody","handleSubmit","preventDefault","includes","onSubmit","Comment","handleDelete","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isVisible","setIsVisible","changedComments","fetchPostDetails","length","preparedUsers","user","App","users","setUsers","setSelectedUser","setSelectedPostId","fetchData","index","ReactDOM","render","document","getElementById"],"mappings":"yUAGaA,G,YAAO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OAEvCC,EAGEH,EAHFG,OACAC,EAEEJ,EAFFI,MACAC,EACEL,EADFK,GASF,OACE,wBAAIC,UAAU,mBACZ,6BACE,8CACeH,EADf,QAGA,gCACGC,IAGL,4BACEG,KAAK,SACLC,MAAOH,EACPC,UAAU,2BACVG,QApBa,SAACC,GAAW,IACrBF,EAAUE,EAAMC,OAAhBH,MAERP,EAAaO,EAAON,KAmBfA,EAAS,QAAU,W,uBC9BfU,EAAO,uCAAG,WAAMC,EAAKC,GAAX,eAAAC,EAAA,sEACAC,MAAM,GAAD,OAHJ,kCAGI,OAAeH,GAAOC,GAD3B,WACfG,EADe,QAGTC,GAHS,sBAIb,IAAIC,MAAJ,UAAaF,EAAOG,OAApB,cAAgCH,EAAOI,aAJ1B,gCAOdJ,EAAOK,QAPO,2CAAH,wDCEPC,EAAe,uCAAG,WAAMC,GAAN,eAAAT,EAAA,sEACNH,EAHG,aAEG,cACvBa,EADuB,yBAGtBA,EAASC,KAAKC,QAAO,SAAAC,GAAO,OAAKJ,IAAWI,EAAQJ,WAH9B,2CAAH,sDAMfK,EAAgB,SAAAC,GAAS,ODEhBjB,ECDb,GAAD,OAToB,YASpB,YAAoBiB,GDCClB,EAAQC,EAAK,CAAEkB,OAAQ,WAA9B,IAAAlB,GCETmB,EAAW,uCAAG,WAAMJ,GAAN,SAAAb,EAAA,gFDADW,ECAqCE,EDC7DhB,ECb0B,YDab,CACXmB,OAAQ,OACRE,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUV,OCNE,iCDAP,IAAMA,ICAC,OAAH,sDCTXW,EAAY,uCAAG,WAAMlC,GAAN,eAAAY,EAAA,sEACNH,EAHJ,UAEU,cACpB0B,EADoB,yBAGN,KAAXnC,EACLmC,EAAMZ,KAAKC,QAAO,SAAA3B,GAAI,OAAKG,IAAWH,EAAKG,UAC3CmC,EAAMZ,MALgB,2CAAH,sDAQZa,EAAc,uCAAG,WAAMf,GAAN,eAAAT,EAAA,sEACTH,EAAQ,GAAD,OAXV,SAWU,YAAiBY,IADf,cACtBxB,EADsB,yBAGrBA,EAAK0B,MAHgB,2CAAH,sD,4CAMpB,WACLc,EACAC,EACAC,GAHK,iBAAA3B,EAAA,sEAKcwB,EAAeC,GAL7B,cAKCxC,EALD,gBAMkBuB,EAAgBiB,GANlC,OAMCf,EAND,OAQLgB,EAAWzC,GACX0C,EAAYjB,GATP,4C,kEAYA,WAA8BkB,EAAcC,GAA5C,eAAA7B,EAAA,sEACkBsB,EAAaM,GAD/B,OACCE,EADD,OAGLD,EAASC,GAHJ,4C,gCCzBMC,EAAY,SAAC,GAAoD,IAAlDH,EAAiD,EAAjDA,aAAc1C,EAAmC,EAAnCA,aAAcuC,EAAqB,EAArBA,eAAqB,EACjDO,mBAAS,IADwC,mBACpET,EADoE,KAC7DM,EAD6D,KAO3E,OAJAI,qBAAU,YDsBL,SAAP,6BCrBIC,CAAeN,EAAcC,KAC5B,CAACD,IAGF,yBAAKrC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXgC,EAAMY,KAAI,SAAAlD,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNmD,IAAKnD,EAAKK,GACVJ,aAAcA,EACdC,QAASsC,IAAmBxC,EAAKK,W,OCpBhC+C,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAM7C,EAAT,EAASA,MAAO8C,EAAhB,EAAgBA,SAAhB,OACnB,2BACE/C,KAAK,OACL8C,KAAMA,EACN7C,MAAOA,EACP+C,YAAW,eAAUF,GACrB/C,UAAU,wBACVkD,SAAU,SAAA9C,GAAK,OAAI4C,EAAS5C,EAAMC,OAAOH,WCPhCiD,EAAW,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAM7C,EAAT,EAASA,MAAO8C,EAAhB,EAAgBA,SAAhB,OACtB,8BACED,KAAMA,EACN7C,MAAOA,EACP+C,YAAY,oBACZjD,UAAU,wBACVkD,SAAU,SAAA9C,GAAK,OAAI4C,EAAS5C,EAAMC,OAAOH,WCFhCkD,G,MAAiB,SAAC,GAA2B,IAAzBlC,EAAwB,EAAxBA,OAAQmC,EAAgB,EAAhBA,UAAgB,EAC/BZ,mBAAS,IADsB,mBAChDM,EADgD,KAC1CO,EAD0C,OAE7Bb,mBAAS,IAFoB,mBAEhDc,EAFgD,KAEzCC,EAFyC,OAG/Bf,mBAAS,IAHsB,mBAGhDb,EAHgD,KAG1C6B,EAH0C,KAKjDC,EAAY,uCAAG,WAAMtD,GAAN,iBAAAK,EAAA,yDACnBL,EAAMuD,iBAEDZ,GAASQ,EAAMK,SAAS,MAAShC,EAHnB,wDAObN,EAAU,CACdJ,SACA6B,OACAQ,QACA3B,QAXiB,SAcIF,EAAYJ,GAdhB,OAcbiB,EAda,OAgBnBc,EAAUd,EAASnB,MAEnBkC,EAAQ,IACRE,EAAS,IACTC,EAAQ,IApBW,4CAAH,sDAuBlB,OACE,0BACEzD,UAAU,iBACV6D,SAAUH,GAEV,yBAAK1D,UAAU,cACb,kBAAC,EAAD,CACE+C,KAAK,OACL7C,MAAO6C,EACPC,SAAUM,KAKd,yBAAKtD,UAAU,cACb,kBAAC,EAAD,CACE+C,KAAK,QACL7C,MAAOqD,EACPP,SAAUQ,KAId,yBAAKxD,UAAU,cACb,kBAAC,EAAD,CACE+C,KAAK,OACL7C,MAAO0B,EACPoB,SAAUS,KAId,4BACExD,KAAK,SACLD,UAAU,wCAFZ,oBC9DO8D,EAAU,SAAC,GAA+B,IAA7BxC,EAA4B,EAA5BA,QAASyC,EAAmB,EAAnBA,aACjC,OACE,wBAAI/D,UAAU,0BACZ,4BACEC,KAAK,SACLD,UAAU,oCACVG,QAAS,kBAAM4D,EAAazC,EAAQvB,MAHtC,KAOA,2BAAIuB,EAAQM,QCLLoC,G,MAAc,SAAC,GAAwB,IAAtB9B,EAAqB,EAArBA,eAAqB,EACXO,mBAAS,IADE,mBAC1CwB,EAD0C,KAC7BC,EAD6B,OAETzB,mBAAS,IAFA,mBAE1C0B,EAF0C,KAE5BC,EAF4B,OAGf3B,oBAAS,GAHM,mBAG1C4B,EAH0C,KAG/BC,EAH+B,KAW3CP,EAAY,uCAAG,WAAMvC,GAAN,eAAAf,EAAA,sEACbc,EAAcC,GADD,OAEb+C,EAAkBJ,EACrB9C,QAAO,SAAAC,GAAO,OAAIA,EAAQvB,MAAQyB,KAErC4C,EAAgBG,GALG,2CAAH,sDAgBlB,OAJA7B,qBAAU,YNZL,SAAP,+BMaI8B,CAAiBtC,EAAgBgC,EAAgBE,KAChD,CAAClC,IAGF,yBAAKlC,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAIiE,EAAYrC,OAGlB,6BAAS5B,UAAU,yBACjB,4BACEC,KAAK,SACLD,UAAU,SACVG,QApBc,WACpBmE,GAAcD,KAgBV,UAKMA,EAAY,OAAS,OAL3B,YAKqCF,EAAaM,OALlD,cAQCJ,GACC,wBAAIrE,UAAU,qBACXmE,EAAavB,KAAI,SAAAtB,GAAO,OACvB,kBAAC,EAAD,CACEA,QAASA,EACTuB,IAAKvB,EAAQvB,GACbgE,aAAcA,SAQxB,iCACE,yBAAK/D,UAAU,6BACb,kBAAC,EAAD,CACEkB,OAAQgB,EACRmB,UAzDQ,SAAC/B,GACjB,IAAMiD,EAAe,sBAAOJ,GAAP,CAAqB7C,IAE1C8C,EAAgBG,W,4CCXb,WAAyBvB,GAAzB,iBAAAvC,EAAA,sEACkBH,EAHA,UAElB,OACCiC,EADD,OAECmC,EAAgBnC,EAASnB,KAC5BC,QAAO,SAAAsD,GAAI,OAAIA,EAAK5B,QAEvBC,EAAS0B,GALJ,4C,sBCEA,IAmEQE,EAjEH,WAAO,IAAD,EACUnC,mBAAS,IADnB,mBACToC,EADS,KACFC,EADE,OAEwBrC,mBAAS,KAFjC,mBAETJ,EAFS,KAEK0C,EAFL,OAG4BtC,mBAAS,IAHrC,mBAGTP,EAHS,KAGO8C,EAHP,KAKhBtC,qBAAU,YDTL,SAAP,2BCUIuC,CAAUH,KACT,IAYH,OACE,yBAAK9E,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVE,MAAOmC,EACPa,SAnBS,SAAC9C,GAAW,IACrBF,EAAUE,EAAMC,OAAhBH,MAER6E,EAAgB7E,KAkBR,4BAAQA,MAAM,KAAd,aACC2E,EAAMjC,KAAI,SAAC+B,EAAMO,GAAP,OACT,4BACErC,IAAK8B,EAAK5E,GACVG,MAAOyE,EAAK5E,IAEX4E,EAAK5B,YAQhB,0BAAM/C,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEqC,aAAcA,EACd1C,aAjCW,SAACI,EAAIH,GACUoF,EAAjCpF,EAAmD,GAAxBG,IAiCpBmC,eAAgBA,KAInBA,GACC,yBAAKlC,UAAU,gBACb,kBAAC,EAAD,CACEkC,eAAgBA,QC5D9BiD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f8bfd7ee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Post = ({ post, handlePostId, isOpen }) => {\n  const {\n    userId,\n    title,\n    id,\n  } = post;\n\n  const handleOpen = (event) => {\n    const { value } = event.target;\n\n    handlePostId(value, isOpen);\n  };\n\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>\n          {`[User: # ${userId} ]:`}\n        </b>\n        <strong>\n          {title}\n        </strong>\n      </div>\n      <button\n        type=\"button\"\n        value={id}\n        className=\"PostsList__button button\"\n        onClick={handleOpen}\n      >\n        {isOpen ? 'Close' : 'Open'}\n      </button>\n    </li>\n  );\n};\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handlePostId: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option) => {\n  const result = await fetch(`${BASE_URL}${url}`, option);\n\n  if (!result.ok) {\n    throw new Error(`${result.status} - ${result.statusText}`);\n  }\n\n  return result.json();\n};\n\nexport const remove = url => request(url, { method: 'DELETE' });\n\nexport const post = (url, data) => (\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n","import { request, remove, post } from './api';\n\nexport const COMMENTS_URL = '/comments';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request(COMMENTS_URL);\n\n  return comments.data.filter(comment => +postId === comment.postId);\n};\n\nexport const deleteComment = commentId => (\n  remove(`${COMMENTS_URL}/${commentId}`)\n);\n\nexport const postComment = async comment => post(COMMENTS_URL, comment);\n","import { request } from './api';\nimport { getPostComments } from './comments';\n\nconst POSTS_URL = '/posts';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request(POSTS_URL);\n\n  return (+userId !== 0)\n    ? posts.data.filter(post => +userId === post.userId)\n    : posts.data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`${POSTS_URL}/${postId}`);\n\n  return post.data;\n};\n\nexport async function fetchPostDetails(\n  selectedPostId,\n  setDetails,\n  setComments,\n) {\n  const post = await getPostDetails(selectedPostId);\n  const comments = await getPostComments(selectedPostId);\n\n  setDetails(post);\n  setComments(comments);\n}\n\nexport async function fetchDataPosts(selectedUser, setPosts) {\n  const response = await getUserPosts(selectedUser);\n\n  setPosts(response);\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Post } from './post';\nimport { fetchDataPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, handlePostId, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetchDataPosts(selectedUser, setPosts);\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <Post\n            post={post}\n            key={post.id}\n            handlePostId={handlePostId}\n            isOpen={+selectedPostId === post.id }\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUser: PropTypes.string.isRequired,\n  handlePostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ name, value, setState }) => (\n  <input\n    type=\"text\"\n    name={name}\n    value={value}\n    placeholder={`Your ${name}`}\n    className=\"NewCommentForm__input\"\n    onChange={event => setState(event.target.value)}\n  />\n);\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  setState: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TextArea = ({ name, value, setState }) => (\n  <textarea\n    name={name}\n    value={value}\n    placeholder=\"Type comment here\"\n    className=\"NewCommentForm__input\"\n    onChange={event => setState(event.target.value)}\n  />\n);\n\nTextArea.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  setState: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport { Input } from './input';\nimport { TextArea } from './textArea';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, addComent }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    const comment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    const response = await postComment(comment);\n\n    addComent(response.data);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <Input\n          name=\"name\"\n          value={name}\n          setState={setName}\n\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <Input\n          name=\"email\"\n          value={email}\n          setState={setEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <TextArea\n          name=\"body\"\n          value={body}\n          setState={setBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.string.isRequired,\n  addComent: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ comment, handleDelete }) => {\n  return (\n    <li className=\"PostDetails__list-item\">\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => handleDelete(comment.id)}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { fetchPostDetails } from '../../api/posts';\nimport { deleteComment } from '../../api/comments';\nimport { Comment } from './comment';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [isVisible, setIsVisible] = useState(true);\n\n  const addComent = (comment) => {\n    const changedComments = [...postComments, comment];\n\n    setPostComments(changedComments);\n  };\n\n  const handleDelete = async(commentId) => {\n    await deleteComment(commentId);\n    const changedComments = postComments\n      .filter(comment => comment.id !== +commentId);\n\n    setPostComments(changedComments);\n  };\n\n  const handleVisible = () => {\n    setIsVisible(!isVisible);\n  };\n\n  useEffect(() => {\n    fetchPostDetails(selectedPostId, setPostDetails, setPostComments);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleVisible}\n        >\n          {`${isVisible ? 'Hide' : 'Show'} ${postComments.length} comments`}\n        </button>\n\n        {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <Comment\n                comment={comment}\n                key={comment.id}\n                handleDelete={handleDelete}\n              />\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addComent={addComent}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.string.isRequired,\n};\n","\nimport { request } from './api';\n\nexport const USERS_URL = '/users';\n\nexport async function fetchData(setState) {\n  const response = await request(USERS_URL);\n  const preparedUsers = response.data\n    .filter(user => user.name);\n\n  setState(preparedUsers);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { fetchData } from './api/users';\n\nexport const USERS_URL = '/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  useEffect(() => {\n    fetchData(setUsers);\n  }, []);\n\n  const userSelect = (event) => {\n    const { value } = event.target;\n\n    setSelectedUser(value);\n  };\n\n  const handlePostId = (id, isOpen) => {\n    !isOpen ? setSelectedPostId(id) : setSelectedPostId('');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={userSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map((user, index) => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))\n            }\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            handlePostId={handlePostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}