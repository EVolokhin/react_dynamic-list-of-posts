{"version":3,"sources":["components/PostsList/post.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/comment.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Post","post","handlePostId","isOpen","userId","title","id","className","type","value","onClick","event","target","request","url","option","a","fetch","result","ok","Error","status","statusText","json","getUserPosts","posts","data","filter","getPostDetails","postId","PostsList","selUser","selectedPostId","useState","setPosts","useEffect","response","fetchData","map","key","getPostComments","comments","comment","deleteComment","commentId","method","postComment","headers","body","JSON","stringify","NewCommentForm","handleAdd","name","setName","email","setEmail","setBody","handleSubmit","preventDefault","includes","onSubmit","placeholder","onChange","Comment","handleDelete","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isVisible","setIsVisible","changedComments","length","App","users","setUsers","setSelUser","setSelectedPostId","preparedUsers","user","index","ReactDOM","render","document","getElementById"],"mappings":"gWAGaA,G,YAAO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OAEvCC,EAGEH,EAHFG,OACAC,EAEEJ,EAFFI,MACAC,EACEL,EADFK,GASF,OACE,wBAAIC,UAAU,mBACZ,6BACE,sCAEGH,EACA,IAHH,KAKG,KAEH,gCACGC,IAGL,4BACEG,KAAK,SACLC,MAAOH,EACPC,UAAU,2BACVG,QAxBa,SAACC,GAAW,IACrBF,EAAUE,EAAMC,OAAhBH,MAERP,EAAaO,EAAON,KAuBfA,EAAS,QAAU,WClCfU,EAAO,uCAAG,WAAMC,EAAKC,GAAX,eAAAC,EAAA,sEACAC,MAAM,GAAD,OAHJ,kCAGI,OAAeH,GAAOC,GAD3B,WACfG,EADe,QAGTC,GAHS,sBAIb,IAAIC,MAAJ,UAAaF,EAAOG,OAApB,cAAgCH,EAAOI,aAJ1B,gCAOdJ,EAAOK,QAPO,2CAAH,wDCEPC,EAAY,uCAAG,WAAMpB,GAAN,eAAAY,EAAA,sEACNH,EAHJ,UAEU,cACpBY,EADoB,yBAGN,KAAXrB,EACLqB,EAAMC,KAAKC,QAAO,SAAA1B,GAAI,OAAKG,IAAWH,EAAKG,UAC3CqB,EAAMC,MALgB,2CAAH,sDAQZE,EAAc,uCAAG,WAAMC,GAAN,eAAAb,EAAA,sEACTH,EAAQ,GAAD,OAXV,SAWU,YAAiBgB,IADf,cACtB5B,EADsB,yBAGrBA,EAAKyB,MAHgB,2CAAH,sDCNdI,G,MAAY,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,QAAS7B,EAAmC,EAAnCA,aAAc8B,EAAqB,EAArBA,eAAqB,EAC5CC,mBAAS,IADmC,mBAC/DR,EAD+D,KACxDS,EADwD,KAuBtE,OApBAC,qBAAU,WAAM,4CACd,4BAAAnB,EAAA,sEACyBQ,IADzB,OACQY,EADR,OAGEF,EAASE,GAHX,4CADc,uBAAC,WAAD,wBAOdC,KACC,IAEHF,qBAAU,WAAM,4CACd,4BAAAnB,EAAA,sEACyBQ,EAAaO,GADtC,OACQK,EADR,OAGEF,EAASE,GAHX,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACN,IAGF,yBAAKxB,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXkB,EAAMa,KAAI,SAAArC,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNsC,IAAKtC,EAAKK,GACVJ,aAAcA,EACdC,QAAS6B,IAAmB/B,EAAKK,Y,OCnChCkC,EAAe,uCAAG,WAAMX,GAAN,eAAAb,EAAA,sEACNH,EAHG,aAEG,cACvB4B,EADuB,yBAGtBA,EAASf,KAAKC,QAAO,SAAAe,GAAO,OAAKb,IAAWa,EAAQb,WAH9B,2CAAH,sDAMfc,EAAgB,SAAAC,GAAS,OHEhB9B,EGDb,GAAD,OAToB,YASpB,YAAoB8B,GHCC/B,EAAQC,EAAK,CAAE+B,OAAQ,WAA9B,IAAA/B,GGETgC,EAAW,uCAAG,WAAMJ,GAAN,SAAA1B,EAAA,gFHADU,EGAqCgB,EHC7D7B,EGb0B,YHab,CACXgC,OAAQ,OACRE,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUxB,OGNE,iCHAP,IAAMA,IGAC,OAAH,sDCTXyB,G,MAAiB,SAAC,GAA2B,IAAzBtB,EAAwB,EAAxBA,OAAQuB,EAAgB,EAAhBA,UAAgB,EAC/BnB,mBAAS,IADsB,mBAChDoB,EADgD,KAC1CC,EAD0C,OAE7BrB,mBAAS,IAFoB,mBAEhDsB,EAFgD,KAEzCC,EAFyC,OAG/BvB,mBAAS,IAHsB,mBAGhDe,EAHgD,KAG1CS,EAH0C,KAKjDC,EAAY,uCAAG,WAAM/C,GAAN,iBAAAK,EAAA,yDACnBL,EAAMgD,iBAEDN,GAASE,EAAMK,SAAS,MAASZ,EAHnB,wDAObN,EAAU,CACdb,SACAwB,OACAE,QACAP,QAXiB,SAcIF,EAAYJ,GAdhB,OAcbN,EAda,OAgBnBgB,EAAUhB,EAASV,MAEnB4B,EAAQ,IACRE,EAAS,IACTC,EAAQ,IApBW,4CAAH,sDAuBlB,OACE,0BACElD,UAAU,iBACVsD,SAAUH,GAEV,yBAAKnD,UAAU,cACb,2BACEC,KAAK,OACL6C,KAAK,OACLS,YAAY,YACZvD,UAAU,wBACVE,MAAO4C,EACPU,SAAU,SAAApD,GAAK,OAAI2C,EAAQ3C,EAAMC,OAAOH,WAI5C,yBAAKF,UAAU,cACb,2BACEC,KAAK,OACL6C,KAAK,QACLS,YAAY,aACZvD,UAAU,wBACVE,MAAO8C,EACPQ,SAAU,SAAApD,GAAK,OAAI6C,EAAS7C,EAAMC,OAAOH,WAI7C,yBAAKF,UAAU,cACb,8BACE8C,KAAK,OACLS,YAAY,oBACZvD,UAAU,wBACVE,MAAOuC,EACPe,SAAU,SAAApD,GAAK,OAAI8C,EAAQ9C,EAAMC,OAAOH,WAI5C,4BACED,KAAK,SACLD,UAAU,wCAFZ,oBCnEOyD,EAAU,SAAC,GAA+B,IAA7BtB,EAA4B,EAA5BA,QAASuB,EAAmB,EAAnBA,aACjC,OACE,wBAAI1D,UAAU,0BACZ,4BACEC,KAAK,SACLD,UAAU,oCACVG,QAAS,kBAAMuD,EAAavB,EAAQpC,MAHtC,KAOA,2BAAIoC,EAAQM,QCLLkB,G,MAAc,SAAC,GAAwB,IAAtBlC,EAAqB,EAArBA,eAAqB,EACXC,mBAAS,IADE,mBAC1CkC,EAD0C,KAC7BC,EAD6B,OAETnC,mBAAS,IAFA,mBAE1CoC,EAF0C,KAE5BC,EAF4B,OAGfrC,oBAAS,GAHM,mBAG1CsC,EAH0C,KAG/BC,EAH+B,KAW3CP,EAAY,uCAAG,WAAMrB,GAAN,eAAA5B,EAAA,sEACb2B,EAAcC,GADD,OAEb6B,EAAkBJ,EACrB1C,QAAO,SAAAe,GAAO,OAAIA,EAAQpC,MAAQsC,KAErC0B,EAAgBG,GALG,2CAAH,sDAwBlB,OAZAtC,qBAAU,WAAM,4CACd,8BAAAnB,EAAA,sEACqBY,EAAeI,GADpC,cACQ/B,EADR,gBAEyBuC,EAAgBR,GAFzC,OAEQS,EAFR,OAIE2B,EAAenE,GACfqE,EAAgB7B,GALlB,4CADc,uBAAC,WAAD,wBASdJ,KACC,CAACL,IAGF,yBAAKzB,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAI4D,EAAYnB,OAGlB,6BAASzC,UAAU,yBACjB,4BACEC,KAAK,SACLD,UAAU,SACVG,QA5Bc,WACpB8D,GAAcD,KA6BPA,EAAY,OAAS,OACrB,IACAF,EAAaK,OACb,IARH,YAYCH,GACC,wBAAIhE,UAAU,qBACX8D,EAAa/B,KAAI,SAAAI,GAAO,OACvB,kBAAC,EAAD,CACEA,QAASA,EACTH,IAAKG,EAAQpC,GACb2D,aAAcA,SAQxB,iCACE,yBAAK1D,UAAU,6BACb,kBAAC,EAAD,CACEsB,OAAQG,EACRoB,UArEQ,SAACV,GACjB,IAAM+B,EAAe,sBAAOJ,GAAP,CAAqB3B,IAE1C4B,EAAgBG,WCkELE,EAzEH,WAAO,IAAD,EACU1C,mBAAS,IADnB,mBACT2C,EADS,KACFC,EADE,OAEc5C,mBAAS,KAFvB,mBAETF,EAFS,KAEA+C,EAFA,OAG4B7C,mBAAS,IAHrC,mBAGTD,EAHS,KAGO+C,EAHP,KAKhB5C,qBAAU,WAAM,4CACd,8BAAAnB,EAAA,sEACyBH,EATJ,UAQrB,OACQuB,EADR,OAEQ4C,EAAgB5C,EAASV,KAC5BC,QAAO,SAAAsD,GAAI,OAAIA,EAAK5B,QAEvBwB,EAASG,GALX,4CADc,uBAAC,WAAD,wBASd3C,KACC,IAYH,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACVE,MAAOsB,EACPgC,SAnBS,SAACpD,GAAW,IACrBF,EAAUE,EAAMC,OAAhBH,MAERqE,EAAWrE,KAkBH,4BAAQA,MAAM,KAAd,aACCmE,EAAMtC,KAAI,SAAC2C,EAAMC,GAAP,OACT,4BACE3C,IAAK0C,EAAK3E,GACVG,MAAOwE,EAAK3E,IAEX2E,EAAK5B,YAQhB,0BAAM9C,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEwB,QAASA,EACT7B,aAjCW,SAACI,EAAIH,GACU4E,EAAjC5E,EAAmD,GAAxBG,IAiCpB0B,eAAgBA,KAInBA,GACC,yBAAKzB,UAAU,gBACb,kBAAC,EAAD,CACEyB,eAAgBA,QCpE9BmD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f91b9f68.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Post = ({ post, handlePostId, isOpen }) => {\n  const {\n    userId,\n    title,\n    id,\n  } = post;\n\n  const handleOpen = (event) => {\n    const { value } = event.target;\n\n    handlePostId(value, isOpen);\n  };\n\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>\n          [User: #\n          {userId}\n          {' '}\n          ]:\n          {' '}\n        </b>\n        <strong>\n          {title}\n        </strong>\n      </div>\n      <button\n        type=\"button\"\n        value={id}\n        className=\"PostsList__button button\"\n        onClick={handleOpen}\n      >\n        {isOpen ? 'Close' : 'Open'}\n      </button>\n    </li>\n  );\n};\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handlePostId: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option) => {\n  const result = await fetch(`${BASE_URL}${url}`, option);\n\n  if (!result.ok) {\n    throw new Error(`${result.status} - ${result.statusText}`);\n  }\n\n  return result.json();\n};\n\nexport const remove = url => request(url, { method: 'DELETE' });\n\nexport const post = (url, data) => (\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n","import { request } from './api';\n\nconst POSTS_URL = '/posts';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request(POSTS_URL);\n\n  return (+userId !== 0)\n    ? posts.data.filter(post => +userId === post.userId)\n    : posts.data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`${POSTS_URL}/${postId}`);\n\n  return post.data;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Post } from './post';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selUser, handlePostId, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await getUserPosts();\n\n      setPosts(response);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await getUserPosts(selUser);\n\n      setPosts(response);\n    }\n\n    fetchData();\n  }, [selUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <Post\n            post={post}\n            key={post.id}\n            handlePostId={handlePostId}\n            isOpen={+selectedPostId === post.id }\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selUser: PropTypes.string.isRequired,\n  handlePostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.string.isRequired,\n};\n","import { request, remove, post } from './api';\n\nexport const COMMENTS_URL = '/comments';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request(COMMENTS_URL);\n\n  return comments.data.filter(comment => +postId === comment.postId);\n};\n\nexport const deleteComment = commentId => (\n  remove(`${COMMENTS_URL}/${commentId}`)\n);\n\nexport const postComment = async comment => post(COMMENTS_URL, comment);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, handleAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    const comment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    const response = await postComment(comment);\n\n    handleAdd(response.data);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.string.isRequired,\n  handleAdd: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ comment, handleDelete }) => {\n  return (\n    <li className=\"PostDetails__list-item\">\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => handleDelete(comment.id)}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { Comment } from './comment';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [postComments, setPostComments] = useState([]);\n  const [isVisible, setIsVisible] = useState(true);\n\n  const handleAdd = (comment) => {\n    const changedComments = [...postComments, comment];\n\n    setPostComments(changedComments);\n  };\n\n  const handleDelete = async(commentId) => {\n    await deleteComment(commentId);\n    const changedComments = postComments\n      .filter(comment => comment.id !== +commentId);\n\n    setPostComments(changedComments);\n  };\n\n  const handleVisible = () => {\n    setIsVisible(!isVisible);\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const post = await getPostDetails(selectedPostId);\n      const comments = await getPostComments(selectedPostId);\n\n      setPostDetails(post);\n      setPostComments(comments);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleVisible}\n        >\n          {isVisible ? 'Hide' : 'Show'}\n          {' '}\n          {postComments.length}\n          {' '}\n          comments\n        </button>\n\n        {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(comment => (\n              <Comment\n                comment={comment}\n                key={comment.id}\n                handleDelete={handleDelete}\n              />\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            handleAdd={handleAdd}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { request } from './api/api';\n\nexport const USERS_URL = '/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selUser, setSelUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await request(USERS_URL);\n      const preparedUsers = response.data\n        .filter(user => user.name);\n\n      setUsers(preparedUsers);\n    }\n\n    fetchData();\n  }, []);\n\n  const userSelect = (event) => {\n    const { value } = event.target;\n\n    setSelUser(value);\n  };\n\n  const handlePostId = (id, isOpen) => {\n    !isOpen ? setSelectedPostId(id) : setSelectedPostId('');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selUser}\n            onChange={userSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map((user, index) => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))\n            }\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selUser={selUser}\n            handlePostId={handlePostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}